Purpose of this document
------------------------
This document contains design notes on a variety of subjects.


.xib design notes
-----------------
None. This project creates the entire UI programmatically and does not use any
.xib files.


UI elements design notes
------------------------
TableViewCell
- TableViewCellFactory creates a couple of table cell types that are not
  available from the UIKit
- For the cell type that has a slider, I did a bit of debugging/inspection of
  the default UITableViewCell and its subviews; following are the results
- Size of a UITableViewCell (from its frame rect) = 320x45
- In a cell with style UITableViewCellStyleValue1 and accessoryType
  UITableViewCellAccessoryNone
  - cell.contentView frame rect = 10/0, 300x43
  - cell.textLabel frame rect = 10/11, 161x21 (text is "Cross-hair distance")
  - cell.detailTextLabel frame rect = 280/11, 10x21 (text is "2")
- In a cell with style UITableViewCellStyleValue1 and accessoryType
  UITableViewCellAccessoryDisclosureIndicator
  - cell.contentView frame rect = 10/1, 280x43
  - cell.textLabel frame rect = 10/11, 46x21 (text is "Black")
  - cell.detailTextLabel frame rect = 163/11, 107x21 (text is "Human player")
  - the disclosure indicator button is a direct subview of the cell (i.e. it's
    not part of the content view, and it's not in the accessoryView) with
    frame rect = 280/1, 30x43


View layout
-----------
This project uses iOS' Auto Layout feature to arrange its views on the screen.

The WindowRootViewController class is the application window's root view
controller. It is responsible for selecting one of several alternative main
application view controllers and displaying it. The decision is based on the
"UI type" provided by LayoutManager, which in turn looks at the device type and
the screen dimensions.

The same main application view controller is used throughout the lifetime of the
app. The original plan to have different main application view controllers for
different interface orientations had to be abandoned, at least for the moment,
because it turned out to be unreasonably difficult to return to the same
position in the logical view controller hierarchy after the interface
orientation change.


iOS 7 and Auto Layout
---------------------
In iOS 7 Apple added the concept of translucent / transparent bars (tab bars,
navigation bars, toolbars, the status bar) and of views that extend behind
those bars. Despite a variety of APIs that allow the developer to control the
behaviour of view controllers, I have had a lot of trouble adapting the app to
the new concept - possibly this has to do with the fact that, personally, I find
the concept quite silly.

Reasons for the current layout:
- When not zoomed the Go board is drawn so that it fully fits into the visible
  area, with no scrolling possible. In this mode it doesn't make sense to let
  the wooden background extend behind bars.
- When zoomed the Go board can be scrolled. I have decided that in this mode I
  also don't want the board to extend behind bars. After all this is a game app,
  not a document viewing app.

These decisions require a number of view controller configuration steps to make
the app look right. Here is an overview:
- To prevent the board from extending behind the status bar, Auto Layout
  constraints like this have been added in various places:
    [NSString stringWithFormat:@"V:|-%d-[navigationBarView]", [UiElementMetrics statusBarHeight]],
  The key too look for is the UiElementMetrics class method statusBarHeight.
- UIViewController.automaticallyAdjustsScrollViewInsets = NO
  - Applied to all types of PlayRootViewController
  - Is required so that BoardView does not allow scrolling when not zoomed (e.g.
    directly after application launch)
  - Is required so that the bottom rows of the board position list table view
    (which is a scroll view) remain visible after a portrait-to-landscape
    interface rotation
  - Although PlayRootViewController view controllers do not themselves contain
    any scroll views, apparently this property is somehow propagated to those
    child view controllers that *do* have scroll views. Surprisingly (and beyond
    comprehension) the same propagation mechanism no longer works if
    automaticallyAdjustsScrollViewInsets is set on the parent view controller
    of PlayRootViewController. What is the logic behind this? I don't know :-(
- UIViewController.edgesForExtendedLayout has been set in various places
  - TODO Where and why?


Working with .sgf files
-----------------------
In older versions of the app .sgf files used to be loaded and saved by the
GTP engine. This meant that file names had to be transmitted over the GTP
protocol. GTP has limitations in what characters can be used in file names,
notably the space character is prohibited.

This section used to contain extensive information on how the app worked around
GTP's file naming limitation. The information is no longer here because it has
become obsolete now that the app uses SgfcKit to load and save .sgf files. This
placeholder is a reminder of the old days and that the obsolete information can
be retrieved from version control if it should ever be needed again.


Drawing the Go board
--------------------
Drawing the Go board is a relatively complex mechanism that consists of two
main parts:
- Tiling
- Layering

Tiling
- The Go board can be freely zoomed in (up to a maximum zoom scale) and out.
  Once the board is zoomed in, the visible part can be scrolled.
- To prevent excessive memory usage when the board is zoomed in, the board is
  split into rectangular sections called "tiles" (cf. the Tile protocol).
- Only those tiles that are currently visible are actually drawn (cf. the
  BoardTileView class).
- When the user scrolls, old tiles that are no longer visible are discarded and
  new tiles that have become visible are newly drawn. This CPU intensive process
  is managed by the BoardView class. To reduce CPU usage somewhat, BoardView
  reuses tile views instead of deallocating and recreating them. Usability tests
  have also shown that scrolling is noticeably smoother with tile reuse.
- Memory and CPU usage are opposing forces, and the tile size is the main
  balancing factor between these forces. Currently the app uses a hard-coded
  tile size that has been experimentally determined to strike an acceptable
  balance (details can be found in the "Research" document). Future versions of
  the app might use dynamically calculated tile sizes for optimized performance
  on different devices.

Layering
- The content of a tile is drawn in multiple CALayers that are stacked on top of
  each other.
- Separating the drawing of different board elements into different layers has
  the advantage that when an event occurs only those layers, or layer parts,
  that are actually affected by the event need to be redrawn. The drawback, of
  course, is that additional memory is required.
- To counteract memory usage, layers are dynamically added and removed depending
  on application events that require certain board elements to be displayed.


Players & Profiles
------------------
Players and GTP engine profiles are conceptually separate entities. Every
computer players has a reference to one GTP engine profile. GTP engine profiles
are independent.

Some rules:
- At any given time there is one GTP engine profile that is active. The active
  profile's settings are used to configure Fuego.
- If a computer player is participating in a game (human vs. computer game,
  computer vs. computer game), the GTP engine profile referenced by that
  computer player is the active profile. In a computer vs. computer game the
  same computer player must play both the black side and the white side, because
  it is not possible to have different GTP engine profiles active at the same
  time.
- In a human vs. human game the app uses a special non-deleteable GTP engine
  profile. This is variously called either the "fallback" profile, or the
  "human vs. human games" profile.

In older versions of the app the user interface exposed Players and Profiles
as separate entitites and allowed the user to share a profile among multiple
players. The user could even assign the "human vs. human games" profile to
a computer player.

Newer versions of the app no longer allow this level of detail because all that
flexibility turned out to be more confusing than hepful to users. Instead the
user interface now lumps Players and Profiles together so that there is now
an effective 1:1 relatiionship between the two. Only the "human vs. human games"
profile can still be seen standalone, but the user interface sells this as a
"background" computer player.
