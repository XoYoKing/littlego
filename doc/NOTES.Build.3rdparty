Purpose of this document
------------------------
This document has details about the 3rdparty software being used by this
project, and how that software is built.


3rdparty software build
-----------------------
Before the first Xcode build of the project is possible, 3rdparty software must
be downloaded and built. Currently most 3rdparty software projects are available
via CocoaPods, but some need to be fetched and built as Git submodules.

After you have cloned the Little Go repository from GitHub the Git submodules
must first be initialized like this:

  cd /path/to/littlego
  git submodule update --init --recursive

This step basically performs a clone of each Git repository that is represented
by a Git submodule. This may take a while, especially the Boost sub-submodule is
quite a hefty download of several hundred MB.

The next step is to build the various 3rdparty software. The following
convenience script should do this for you:

  cd /path/to/littlego
  ./script/build-3rdparty-software.sh

A short overview of what the script does:
- Invoke build-software.sh for each 3rdparty software package, in the correct
  order of dependencies
- build-software.sh first invokes build-env.sh to obtain general build settings;
  build-env.sh reflects the Xcode build environment such as the base SDK, or the
  deployment target. If the Xcode build environment changes, build-env.sh also
  needs to be modified
- build-software.sh then invokes the package-specific build script (e.g.
  build-fuego.sh) to obtain information specific to that package (e.g. build
  settings)
- build-software.sh then proceeds with a number of fixed steps: execute
  pre-build steps (e.g. clean previous build results, apply patches), run the
  actual build (e.g. run "xcodebuild"), execute post-build steps, and finally
  install the built software
- All this occurs within the project top-level folder "3rdparty"

The next step is to set up the CocoaPods environment. For this to work you need
to have CocoaPods installed on your machine. Visit the CocoaPods website
(https://cocoapods.org/) for instructions how to do this. Once CocoaPods is
installed, run the following commands:

  cd /path/to/littlego
  pod install

If all went well, you are now ready to build Little Go itself.


Boost build/installation issues
-------------------------------
No known issues, build should work out of the box. Any issues have been worked
out before in the Fuego on iOS project that is included as a Git submodule.

The Boost build results in this framework bundle:
  3rdparty/install/boost.framework


Fuego build/installation issues
-------------------------------
No known issues, build should work out of the box. Any issues have been worked
out before in the Fuego on iOS project that is included as a Git submodule.

The Fuego build results in this framework bundle:
  3rdparty/install/fuego-on-ios.framework


libsgfc++ build/installation issues
-----------------------------------
No known issues, build should work out of the box.

The libsgfc++ build results in this framework bundle:
  3rdparty/install/libsgfcplusplus_static.framework


SgfcKit build/installation issues
---------------------------------
No known issues, build should work out of the box.

The SgfcKit build results in this framework bundle:
  3rdparty/install/SgfcKit_static.framework


Testing the patched version of Fuego on the macOS command line
--------------------------------------------------------------
Little Go integrates Fuego via the "fuego-for-littlego" branch of the Fuego on
iOS project. This branch has a few modifications of the original Fuego source
code that one might wish to test on the macOS command line, i.e. with a
macOS build of Fuego. The following instructions should help you along to
create such a build.

Preconditions
- Install the Xcode command line tools
- Install Boost system-wide (e.g. through Homebrew)
- Install the Autotools system-wide (e.g. through Homebrew)

These are the commands to build/install Fuego:
  cd /path/to/littlego/3rdparty/src/fuego-on-ios
  autoreconf -i
  ./configure --prefix="$(pwd)/../../install/fuego-macos"
  make
  make install

Run Fuego
  cd /path/to/littlego/3rdparty/install/fuego-macos
  ./bin fuego

GTP commands can now be typed to control Fuego. To get rid of everything, simply
remove the "fuego-macos" folder.
